(function (e) { var t = { Singleton: 0, Instance: 1, Method: 2 }; var n = {}; var r = function (e) { if (typeof e == "function") { var t = { func: e }; spyOn(t, "func"); return t.func } if (typeof e == "object") { var n = Object.getOwnPropertyNames(e); for (var r in n) { spyOn(e, n[r]) } } return e }; var i = function (e) { e = e || {}; for (var t = 1; t < arguments.length; t++) { if (!arguments[t]) continue; for (var n in arguments[t]) { if (arguments[t].hasOwnProperty(n)) e[n] = arguments[t][n] } } return e }; e.getAllContainers = function () { return n }; e.Container = e.Container || {}; e.Container.New = function (e) { if (e) { if (n["name"]) { throw { name: "DIYError", message: "A container with the name '" + e + "' has already been created" } } } var i = {}; var o = function (e, n) { i[e] = { type: t.Instance, data: n } }; var u = function (e, n) { i[e] = { type: t.Singleton, data: n } }; var a = function (e, n) { i[e] = { type: t.Method, data: n } }; var f = {}; f.Name = e; f.bind = o; f.bindSingleton = u; f.bindMethod = a; f.reset = function () { i = {} }; f.getDependency = function (n) { var r = i[n]; if (!r) { throw { name: "DIYError", message: "A binding was not found for argument '" + n + "' in the specified container" } } switch (r.type) { case t.Singleton: return r.data; case t.Instance: return r.data.DIY(e); case t.Method: return r.data() } throw { name: "DIYError", message: "One or more bindings more incorrectly configured" } }; f.getMock = function (e) { var n = i[e]; if (!n) { throw { name: "DIYError", message: "A binding was not found for argument '" + e + "' in the specified container" } } var o; switch (n.type) { case t.Singleton: o = n.data; break; case t.Instance: o = s(n.data); break; case t.Method: o = n.data(); break } return r(o) }; if (e) { n[e] = f } else { n.default = f } return f }; var s = function (e) { if (e.isSpy) { e = e.originalValue } var t = u(e); var n = t.length; var r = []; if (t.length > 1 || t[0].length > 0) { for (var i = r.length; i < n; i++) { r.push({}) } } var o = {}; o.protected = {}; o.base = null; o.derivesFrom = function (e) { o.base = s(e) }; o.dependsOn = function () { var e = [].slice.call(arguments); for (var t in e) { argument = e[t]; o[argument] = {} } }; if (typeof e.DerivesFrom == "function") { o.base = s(e.DerivesFrom) } return e.apply(o, r) }; var o = function (e) { var t; if (e) { t = n[e]; if (!t) { throw { name: "DIYError", message: "A container with the name '" + e + "' was not found, have you created one?" } } } else { t = n.default; if (!t) { throw { name: "DIYError", message: "A default container was not found, have you created one?" } } } return t }; var u = function (e) { var t = e.toString(); var n = t.indexOf("(") + 1; var r = t.indexOf(")"); var i = t.substring(n, r).split(","); return i }; Function.prototype.DIY = function (e, t, n) { var r = o(e); var s = this; if (s.isSpy) { s = s.originalValue } var a = u(s); var f = a.length; var l = n || []; if (a.length > 1 || a[0].length > 0) { for (var c = l.length; c < f; c++) { l.push(r.getDependency(a[c].trim())) } } var h = {}; h.protected = t || {}; h.base = null; h.derivesFrom = function (t) { h.base = t.DIY(e, h.protected); h = i(h, h.protected) }; h.dependsOn = function () { var e = [].slice.call(arguments); for (var t in e) { argument = e[t]; h[argument] = r.getDependency(argument.trim()) } }; if (typeof this.DerivesFrom == "function") { h.base = this.DerivesFrom.DIY(e, h.protected) } return this.apply(h, l) }; Function.prototype.AutoMock = function (e, t) { var n = o(e); var r = this; if (r.isSpy) { r = r.originalValue } var i = u(r); var s = i.length; var a = t || []; var f = { dependencies: {} }; if (i.length > 1 || i[0].length > 0) { for (var l = a.length; l < s; l++) { var c = i[l].trim(); var h = n.getMock(c); f.dependencies[c] = h; a.push(h) } } var p; var d = {}; d.protected = {}; d.base = null; d.derivesFrom = function (t) { p = t.AutoMock(e); d.base = p.obj }; d.dependsOn = function () { var e = [].slice.call(arguments); for (var t in e) { var r = e[t].trim(); var i = n.getMock(r); f.dependencies[r] = i; d[r] = i } }; if (typeof this.DerivesFrom == "function") { p = this.DerivesFrom.AutoMock(e); d.base = p.obj } f.obj = this.apply(d, a); if (p) { f.base = p } return f }; Function.prototype.Mock = function (e) { var t = s(this); return r(t) } })(window.DIY = window.DIY || {})